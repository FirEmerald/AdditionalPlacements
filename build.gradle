plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
     maven {
         name = 'ParchmentMC'
         url = 'https://maven.parchmentmc.org'
     }
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
	maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
    maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
	maven { url = "https://maven.tterrag.com/" } // Flywheel
}

loom {
    //splitEnvironmentSourceSets()

	//mods {
	//	"additionalplacements" {
	//		sourceSet sourceSets.main
	//		sourceSet sourceSets.client
	//	}
	//}
	accessWidenerPath = file("src/main/resources/additionalplacements.accesswidener")
	runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${modid}"
 
            runDir "build/datagen"
        }
    }

}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-models-v0:0.4.5+9386d8a7cb")
	
	modApi("com.simibubi.create:create-fabric-1.20.1:0.5.1-d-build.1161+mc1.20.1")
	modApi("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.porting_lib_version}")
   	modApi("io.github.fabricators_of_create.Porting-Lib:models:${project.porting_lib_version}")
   	modApi("io.github.fabricators_of_create.Porting-Lib:model_loader:${project.porting_lib_version}")
   	modApi("io.github.fabricators_of_create.Porting-Lib:model_generators:${project.porting_lib_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}